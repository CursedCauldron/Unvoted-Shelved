import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.1'
    id 'java'
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

}

configurations {
    shade
    modImplementation.extendsFrom(shade)
}

dependencies {
    minecraft "com.mojang:minecraft:1.18.1"
    mappings "net.fabricmc:yarn:1.18.1+build.12:v2"
    modImplementation "net.fabricmc:fabric-loader:0.12.12"
    //Fabric api
    shadow localGroovy()
    shadow gradleApi()

    modImplementation "net.fabricmc.fabric-api:fabric-api:0.45.0+1.18"
    modImplementation 'software.bernie.geckolib:geckolib-fabric-1.18:3.0.23'

}

shadowJar {
    configurations = [project.configurations.shade] // <- Tell shadowJar to shade dependencies from 'shade'

    // Skip unnecessary assets and duplicated java files GeckoLib comes with
    exclude 'software/bernie/example/**'
    exclude 'assets/geckolib3/**'
    exclude '**/*.java'

    relocate 'software.bernie.geckolib', 'software.bernie.modid.geckolib' // <- Move the shadowed geckolib package. This prevents classpath conflicts in runtime

    classifier ''

    finalizedBy 'reobfShadowJar' // <- Finish shading with reobfuscation
}

artifacts {
    archives tasks.shadowJar // <- Add the shadowJar task to the archives configuration
}


processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}


jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}




// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

jar.finalizedBy('reobfJar')

